name: Post release - Push to Pipy 

on:
  repository_dispatch:
    types:
      - post-release
      # Client payload should contain
      # version_name: vX.Y.Z (with prefix)
      # slack_thread_id: (Also named thread_ts == thread timestamp == timestamp of the first message)
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check if organization member
        id: is_organization_member
        uses: JamesSingleton/is-organization-member@1.0.1
        with:
          organization: Giskard-AI
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Interrupt job
        if: ${{ steps.is_organization_member.outputs.result == 'false' }}
        shell: bash
        run: |
          echo "Job failed due to user not being a member of Giskard-AI organization and the 'safe for build' label not being set on the PR"
          exit 1

      - name: Write release version env vars (with/without v)
        run: |
          VERSION_NAME="${{ github.event.client_payload.version_name }}"
          VERSION_NUMBER="${VERSION_NAME:1}"
          echo "VERSION_NUMBER=${VERSION_NUMBER}" >> $GITHUB_ENV
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4.1.0
        with:
          fetch-tags: true
          ref: main
          token: ${{ secrets.RELEASE_PAT_TOKEN }} # Needed to trigger other actions

      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: '3.10'
          cache: false

      - name: Edit pyproject.toml
        run:  sed -i 's/^\(version *= *\).*$/\1"${{ env.VERSION_NUMBER }}"/' pyproject.toml

      - name: Configure git
        run:  |
          git config --global user.name 'BotReleaser'
          git config --global user.email 'bot.releaser@users.noreply.github.com'

      - name: Adding file
        run:  |
          git add pyproject.toml
          git fetch --quiet --tags
          git commit -m "${{ env.VERSION_NAME }}" --allow-empty
          git tag ${{ env.VERSION_NAME }}

      - name: Push to main and tags
        run: |
          git push origin main
          git push origin ${{ env.VERSION_NAME }}

      - run: mkdir -p dist

      - name: Download wheel (release candidate)
        working-directory: dist
        run: gh -R ${{ github.repository_owner }}/giskard run download -n rc-wheel-${{ env.VERSION_NUMBER }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Validate wheel version
        working-directory: dist
        run: |
          python -m pip install pkginfo
          ls giskard-*.whl | xargs -I {} python3 -c 'import pkginfo; print(pkginfo.wheel.Wheel("{}").version)' > WHEEL_VERSION
          if [ ! `grep ${{ env.VERSION_NUMBER }} WHEEL_VERSION` ]
          then
            echo "Expected wheel version ${{ env.VERSION_NUMBER }}, got $(cat WHEEL_VERSION)"
            exit 1
          else
            echo "Cleaning file"
            rm -f WHEEL_VERSION
          fi
  
      # build .tar.gz sdist tarball
      # --no-clean preserves the previously downloaded wheel in dist/
      - name: Build source distribution tarball
        run: pdm build --no-wheel --no-clean

      - name: Create Github Release
        id: github-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_NAME }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            dist/giskard-*.tar.gz
            dist/giskard-*.whl

      - name: Push to Pipy
        run: pdm publish --no-build --username "${{ secrets.PIPY_USERNAME }}" --password "${{ secrets.PIPY_PASSWORD }}"

      - name: Set job success env var
        run: |
          echo "JOB_SUCCESS=true" >> $GITHUB_ENV

      - name: "@slack Share release process completion"
        # cancellable always() https://docs.github.com/en/actions/learn-github-actions/expressions#status-check-functions
        if: ${{ !cancelled() }}
        uses: slackapi/slack-github-action@v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          ON_SUCCESS: |-
            *${{ env.VERSION_NAME }}* has been published to PyPI ! :python: :tada:
            <${{ steps.github-release.outputs.url }}|Release notes> | <https://pypi.org/project/giskard/${{ env.VERSION_NUMBER }}|PyPI> <!channel>
          ON_FAILURE: |-
            Could not publish *${{ env.VERSION_NAME }}* to PyPI :x:
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|logs> <!channel>
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          slack-message: ${{ env.JOB_SUCCESS == 'true' && env.ON_SUCCESS || env.ON_FAILURE }}
          # reploy_broadcast == also send to channel
          payload: |
            {
              "thread_ts": "${{ github.event.client_payload.slack_thread_id }}",
              "reply_broadcast": true
            }
