plugins {
    id "base"
    id "idea"
    id "org.sonarqube"
    id "ru.vyarus.use-python" version "2.3.0"
}

sonarqube {
    properties {
        property "sonar.python.version", "3"
        property "sonar.sources", "ml_worker"
        property "sonar.tests", "test"
        property "sonar.language", "python"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.core.codeCoveragePlugin", "cobertura"
        property "sonar.python.coverage.reportPaths", "coverage.xml"
    }
}

python {
    envPath = '.venv'
    minPythonVersion = '3.7'
    scope = 'VIRTUALENV'
    installVirtualenv = true
    pip 'poetry:1.1.13'
}

task install(type: PythonTask) {
    dependsOn python: pipInstall

    module = "poetry"
    command "install"

}

task cleanup(type: Delete) {
    delete 'generated', '.venv', 'coverage.xml', '.coverage'
}

task generateProto(type: PythonTask) {
    dependsOn install

    environment "PATH", file(project.extensions.python.envPath + "/bin")

    def out = 'generated'
    def fout = file(out)
    def pdir = file('../giskard-common/proto')

    doFirst {
        mkdir fout
    }
    doLast {
        ant.replaceregexp(match: '^import ([^\\.]*?_pb2)', replace: 'import ' + out + '.\\1', flags: 'g', byline: true) {
            fileset(dir: fout, includes: '*py')
        }
    }

    module = "grpc_tools.protoc"
    command("-I$pdir --python_out=$fout --grpc_python_out=$fout --mypy_out=$fout $pdir/ml-worker.proto")
}

task test(type: PythonTask) {
    module = "pytest"
    command("--cov=ml_worker test --cov-report=xml")
}

idea {
    module {
        excludeDirs += file('.venv')
    }
}

build.dependsOn install, generateProto, test
clean.dependsOn cleanup