syntax = "proto3";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "ai.giskard.worker";
option java_outer_classname = "WorkerProto";
option objc_class_prefix = "WRK";

package worker;

service MLWorker {
  rpc getInfo(MLWorkerInfoRequest) returns (MLWorkerInfo){}
  rpc runTest (RunTestRequest) returns (TestResultMessage) {}
  rpc runAdHocTest (RunAdHocTestRequest) returns (TestResultMessage) {}
  rpc runModel(RunModelRequest) returns (RunModelResponse) {}
  rpc runModelForDataFrame(RunModelForDataFrameRequest) returns (RunModelForDataFrameResponse) {}
  rpc explain(ExplainRequest) returns (ExplainResponse) {}
  rpc explainText(ExplainTextRequest) returns (ExplainTextResponse) {}
  rpc echo(EchoMsg) returns (EchoMsg){}
  rpc getTestRegistry(google.protobuf.Empty) returns (TestRegistryResponse) {}
  rpc filterDataset(stream FilterDatasetRequest) returns (stream FilterDatasetResponse) {}
}

message MLWorkerInfoRequest{
  bool list_packages = 1;
}

message MLWorkerInfo{
  PlatformInfo platform = 1;
  string interpreter = 2;
  string interpreter_version = 3;
  map<string, string> installed_packages = 4;
  uint32 internal_grpc_port = 5;
  bool is_remote = 6;
  uint32 pid = 7;
  uint64 process_start_time = 8;
  string giskard_client_version = 9;
}

message PlatformInfo{
  string machine = 1;
  string node = 2;
  string processor = 3;
  string release = 4;
  string system = 5;
  string version = 6;
}

message FileUploadRequest {
  oneof request {
    FileUploadMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

message FileUploadMetadata{
  uint64 id = 1;
  FileType file_type = 2;
  string name = 3;
  string project_key = 4;
}

enum FileType{
  MODEL = 0;
  DATASET = 1;
}


message EchoMsg{
  string  msg = 1;
}

message ExplainRequest{
  ArtifactRef model = 1;
  ArtifactRef dataset = 2;
  map<string, string> columns = 3;
}

message ExplainTextRequest{
  ArtifactRef model = 1;
  string feature_name = 2;
  map<string, string> columns = 3;
  map<string, string> feature_types = 4;
  uint32 n_samples = 5;
}

message ExplainResponse{
  message Explanation{
    map<string, float> per_feature = 1;
  }
  map<string, Explanation> explanations = 1;
}


message ExplainTextResponse{
  message WeightsPerFeature{
    repeated float weights = 1;
  }
  repeated string words = 1;
  map<string, WeightsPerFeature> weights = 2;
}

message RunModelForDataFrameResponse{
  DataFrame all_predictions = 1;
  repeated string prediction = 2;
  repeated float probabilities = 3;
  repeated float raw_prediction = 4;
}
message DataRow{
  map<string, string> columns = 1;
}
message DataFrame{
  repeated DataRow rows = 1;
}

message RunModelForDataFrameRequest{
  ArtifactRef model = 1;
  DataFrame dataframe = 2;
  string target = 3;
  map<string, string> feature_types = 4;
  map<string, string> column_types = 5;

}
message RunModelRequest{
  ArtifactRef model = 1;
  ArtifactRef dataset = 2;
}

message RunModelResponse{
  string results_csv = 1;
  string calculated_csv = 2;
}

message RunAdHocTestRequest {
  string testId = 1;
  repeated TestArgument arguments = 2;
}

message TestArgument{
  string name = 1;
  oneof argument{
    ArtifactRef model = 2;
    ArtifactRef dataset = 3;
    float float = 4;
    string string = 5;
  }
}

message RunTestRequest {
  string code = 1;
  ArtifactRef model = 2;
  ArtifactRef actual_ds = 3;
  ArtifactRef reference_ds = 4;
}

message RunTestResponse {
  string name = 1;
}

message Partial_unexpected_counts {
  repeated uint32 value = 1;
  uint32 count = 2;
}

message NamedSingleTestResult{
  string name = 1;
  SingleTestResult result = 2;

}


enum TestMessageType{
  ERROR = 0;
  INFO = 1;
}
message TestMessage{
  TestMessageType type = 1;
  string text = 2;
}

message SingleTestResult{
  bool passed = 13;
  repeated TestMessage messages = 16;
  map<string, string> props = 14;
  float metric = 15;
  google.protobuf.Int32Value missing_count = 2;
  google.protobuf.DoubleValue missing_percent = 3;
  google.protobuf.Int32Value unexpected_count = 4;
  google.protobuf.DoubleValue unexpected_percent = 5;
  google.protobuf.DoubleValue unexpected_percent_total = 6;
  google.protobuf.DoubleValue unexpected_percent_nonmissing = 7;
  repeated uint32 partial_unexpected_index_list = 9;
  repeated Partial_unexpected_counts partial_unexpected_counts = 10;
  repeated uint32 unexpected_index_list = 12;
  bytes output_df = 18;
  uint32 number_of_perturbed_rows = 20;

  repeated uint32 actual_slices_size = 21;
  repeated uint32 reference_slices_size = 22;
}

message TestResultMessage {
  repeated NamedSingleTestResult results = 1;
}

message ArtifactRef{
  string project_key = 1;
  string id = 2;
}

message Chunk {
  bytes content = 1;
}

enum StatusCode {
  Unknown = 0;
  Ok = 1;
  Failed = 2;
  CacheMiss = 3;
  Ready = 4;
  Next = 5;
}

message UploadStatus {
  StatusCode code = 1;
}


message TestFunctionArgument{
  string name = 1;
  string type = 2;
  bool optional = 3;
  string default = 4;
}


message TestFunction{
  string id = 1;
  string name = 2;
  string module = 3;
  string doc = 4;
  string module_doc = 5;
  map<string, TestFunctionArgument> arguments = 6;
  repeated string tags = 7;
}

message TestRegistryResponse{
  repeated TestFunction functions = 1;
}

message MLWorkerErrorInfo{
  string error = 1;
  string stack = 2;
}

message FilterDatasetRequest {
  FilterDatasetMetadata meta = 1;
  Chunk data = 2;
  uint32 idx = 3;
}

message FilterDatasetMetadata {
  string function = 1;
  string headers = 2; // Since we are going to stream the CSV rows, we store the headers first
  map<string, string> column_types = 3;
}

message FilterDatasetResponse {
  StatusCode code = 1;
  uint32 idx = 2;
  repeated uint32 rows = 3; // Will we ever have >4 billion rows in a chunk?
  string error_message = 4;
}