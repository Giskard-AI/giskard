syntax = "proto3";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "ai.giskard.worker";
option java_outer_classname = "WorkerProto";
option objc_class_prefix = "WRK";

package worker;

service MLWorker {
  rpc getInfo(MLWorkerInfoRequest) returns (MLWorkerInfo){}
  rpc runAdHocTest (RunAdHocTestRequest) returns (TestResultMessage) {}
  rpc datasetProcessing (DatasetProcessingRequest) returns (DatasetProcessingResultMessage) {}
  rpc runTestSuite (RunTestSuiteRequest) returns (TestSuiteResultMessage) {}
  rpc runModel(RunModelRequest) returns (google.protobuf.Empty) {}
  rpc runModelForDataFrame(RunModelForDataFrameRequest) returns (RunModelForDataFrameResponse) {}
  rpc explain(ExplainRequest) returns (ExplainResponse) {}
  rpc explainText(ExplainTextRequest) returns (ExplainTextResponse) {}
  rpc echo(EchoMsg) returns (EchoMsg){}
  rpc generateTestSuite(GenerateTestSuiteRequest) returns (GenerateTestSuiteResponse) {}
  rpc stopWorker(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc getCatalog(google.protobuf.Empty) returns (CatalogResponse) {}
  rpc generateQueryBasedSlicingFunction(GenerateQueryBasedSliceRequest) returns (GenerateQueryBasedSliceResponse) {}
}

message MLWorkerInfoRequest{
  bool list_packages = 1;
}

message MLWorkerInfo{
  PlatformInfo platform = 1;
  string interpreter = 2;
  string interpreter_version = 3;
  map<string, string> installed_packages = 4;
  string internal_grpc_address = 5;
  bool is_remote = 6;
  uint32 pid = 7;
  uint64 process_start_time = 8;
  string giskard_client_version = 9;
}

message PlatformInfo{
  string machine = 1;
  string node = 2;
  string processor = 3;
  string release = 4;
  string system = 5;
  string version = 6;
}

message FileUploadRequest {
  oneof request {
    FileUploadMetadata metadata = 1;
    Chunk chunk = 2;
  }
}

message FileUploadMetadata{
  uint64 id = 1;
  FileType file_type = 2;
  string name = 3;
  string project_key = 4;
}

enum FileType{
  MODEL = 0;
  DATASET = 1;
}


message EchoMsg{
  string  msg = 1;
}

message ExplainRequest{
  ArtifactRef model = 1;
  ArtifactRef dataset = 2;
  map<string, string> columns = 3;
}

message ExplainTextRequest{
  ArtifactRef model = 1;
  string feature_name = 2;
  map<string, string> columns = 3;
  map<string, string> column_types = 4;
  uint32 n_samples = 5;
}

message ExplainResponse{
  message Explanation{
    map<string, float> per_feature = 1;
  }
  map<string, Explanation> explanations = 1;
}


message ExplainTextResponse{
  message WeightsPerFeature{
    repeated float weights = 1;
  }
  repeated string words = 1;
  map<string, WeightsPerFeature> weights = 2;
}

message RunModelForDataFrameResponse{
  DataFrame all_predictions = 1;
  repeated string prediction = 2;
  repeated float probabilities = 3;
  repeated float raw_prediction = 4;
}

message DataRow{
  map<string, string> columns = 1;
}

message DataFrame{
  repeated DataRow rows = 1;
}

message RunModelForDataFrameRequest{
  ArtifactRef model = 1;
  DataFrame dataframe = 2;
  string target = 3;
  map<string, string> column_types = 4;
  map<string, string> column_dtypes = 5;
}

message RunModelRequest{
  ArtifactRef model = 1;
  ArtifactRef dataset = 2;
  uint64 inspectionId = 3;
  string project_key = 4;
}

message RunModelResponse{
  string results_csv = 1;
  string calculated_csv = 2;
}

message RunAdHocTestRequest {
  string testUuid = 1;
  repeated FuncArgument arguments = 2;
}

message DatasetProcessingRequest {
  ArtifactRef dataset = 1;
  repeated DatasetProcessingFunction functions = 2;
}

message DatasetProcessingFunction {
  oneof function {
    ArtifactRef slicingFunction = 1;
    ArtifactRef transformationFunction = 2;
  }
  repeated FuncArgument arguments = 3;
}

message SuiteTestArgument {
  int64 id = 1;
  string testUuid = 2;
  repeated FuncArgument arguments = 3;
}

message RunTestSuiteRequest {
  repeated SuiteTestArgument tests = 1;
  repeated FuncArgument globalArguments = 2;
}

message FuncArgument{
  string name = 1;
  oneof argument{
    ArtifactRef model = 2;
    ArtifactRef dataset = 3;
    float float = 4;
    int32 int = 5;
    string str = 6;
    bool bool = 7;
    ArtifactRef slicingFunction = 8;
    ArtifactRef transformationFunction = 9;
    string kwargs = 10;
  }
  repeated FuncArgument args = 11;
  bool none = 12;
}

message RunTestResponse {
  string name = 1;
}

message Partial_unexpected_counts {
  repeated uint32 value = 1;
  uint32 count = 2;
}

message NamedSingleTestResult{
  string testUuid = 1;
  SingleTestResult result = 2;
}

message IdentifierSingleTestResult{
  int64 id = 1;
  SingleTestResult result = 2;
}


enum TestMessageType{
  ERROR = 0;
  INFO = 1;
}
message TestMessage{
  TestMessageType type = 1;
  string text = 2;
}

message SingleTestResult{
  bool passed = 13;
  bool is_error = 23;
  repeated TestMessage messages = 16;
  map<string, string> props = 14;
  float metric = 15;
  int32 missing_count = 2;
  double missing_percent = 3;
  int32 unexpected_count = 4;
  double unexpected_percent = 5;
  double unexpected_percent_total = 6;
  double unexpected_percent_nonmissing = 7;
  repeated uint32 partial_unexpected_index_list = 9;
  repeated Partial_unexpected_counts partial_unexpected_counts = 10;
  repeated uint32 unexpected_index_list = 12;
  bytes output_df = 18;
  uint32 number_of_perturbed_rows = 20;

  repeated uint32 actual_slices_size = 21;
  repeated uint32 reference_slices_size = 22;
}

message TestResultMessage {
  repeated NamedSingleTestResult results = 1;
}

message DatasetProcessingResultMessage {
  string datasetId = 1;
  uint32 totalRows = 2;
  repeated uint32 filteredRows = 3;
  repeated DatasetRowModificationResult modifications = 4;
}

message DatasetRowModificationResult {
  uint32 rowId = 1;
  map<string, string> modifications = 2;
}

message TestSuiteResultMessage {
  bool is_error = 1; // True when an unhandled exception happened (!= test failed)
  bool is_pass = 2;
  repeated IdentifierSingleTestResult results = 3;
  string logs = 4;
}

message ArtifactRef{
  string project_key = 1;
  string id = 2;
  optional bool sample = 3;
}

message Chunk {
  bytes content = 1;
}

enum StatusCode {
  Unknown = 0;
  Ok = 1;
  Failed = 2;
  CacheMiss = 3;
  Ready = 4;
  Next = 5;
}

message UploadStatus {
  StatusCode code = 1;
}

message MLWorkerErrorInfo{
  string error = 1;
  string stack = 2;
}

message SuiteInput{
  string name = 1;
  string type = 2;
  optional ModelMeta model_meta = 3;
  optional DatasetMeta dataset_meta = 4;
}

message ModelMeta{
  optional string model_type = 1;
}

message DatasetMeta {
  optional string target = 1;
}

message GenerateTestSuiteRequest{
  string project_key = 1;
  repeated SuiteInput inputs = 2;
}

message GenerateTestSuiteResponse{
  repeated GeneratedTest tests = 1;
}

message GeneratedTest{
  string test_uuid = 1;
  repeated GeneratedTestInput inputs = 2;
}

message GeneratedTestInput{
  string name = 1;
  string value = 2;
  bool is_alias = 3;
}

message CatalogResponse{
  map<string, FunctionMeta> tests = 1;
  map<string, DatasetProcessFunctionMeta> slices = 2;
  map<string, DatasetProcessFunctionMeta> transformations = 3;
}

message FunctionMeta {
  string uuid = 1;
  string name = 2;
  string displayName = 3;
  uint32 version = 4;
  string module = 5;
  string doc = 6;
  string moduleDoc = 7;
  repeated TestFunctionArgument args = 8;
  repeated string tags = 9;
  string code = 10;
  string type = 11;
}

message DatasetProcessFunctionMeta {
  string uuid = 1;
  string name = 2;
  string displayName = 3;
  uint32 version = 4;
  string module = 5;
  string doc = 6;
  string moduleDoc = 7;
  repeated TestFunctionArgument args = 8;
  repeated string tags = 9;
  string code = 10;
  string type = 11;
  bool cellLevel = 12;
  optional string columnType = 13;
  string processType = 14;
}


message TestFunctionArgument{
  string name = 1;
  string type = 2;
  bool optional = 3;
  string default = 4;
  uint32 argOrder = 5;
}

enum ComparisonType {
  IS = 0;
  IS_NOT = 1;
  CONTAINS = 2;
  DOES_NOT_CONTAINS = 3;
  STARTS_WITH = 4;
  ENDS_WITH = 5;
  IS_EMPTY = 6;
  IS_NOT_EMPTY = 7;
}

message ComparisonClause{
  string column_name = 1;
  ComparisonType comparison_type = 2;
  string column_dtype = 3;
  optional string value = 4;
}

message GenerateQueryBasedSliceRequest{
  repeated ComparisonClause comparison_clauses = 1;
}

message GenerateQueryBasedSliceResponse{
  string id = 1;
}
